type Query {
  messages(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): MessageConnection

  """Returns an account by ID"""
  account(
    """The globlal ID of the account"""
    id: ID
  ): Account

  """Returns a list of all accounts"""
  accounts(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): AccountConnection

  """Returns a transaction by ID"""
  transaction(
    """The global ID of the transaction"""
    id: ID
  ): Transaction

  """Returns a list of all ctransactions"""
  transactions(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): TransactionConnection
}

"""A connection to a list of items."""
type MessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MessageEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type MessageEdge {
  """The item at the end of the edge"""
  node: Message

  """A cursor for use in pagination"""
  cursor: String!
}

"""Represents a message"""
type Message implements Node {
  """The ID of an object"""
  id: ID!
  content: String
  createdAt: String
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Represents a bank account"""
type Account implements Node {
  """The ID of an object"""
  id: ID!

  """MongoDB ObjectID"""
  _id: ID

  """Account owner name"""
  name: String

  """Current account balance"""
  balance: Float

  """Creation date of the account"""
  createdAt: String

  """Last update date of the account"""
  updatedAt: String
}

"""A connection to a list of items."""
type AccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AccountEdge]
}

"""An edge in a connection."""
type AccountEdge {
  """The item at the end of the edge"""
  node: Account

  """A cursor for use in pagination"""
  cursor: String!
}

"""Represents a transaction between two accounts"""
type Transaction implements Node {
  """The ID of an object"""
  id: ID!

  """MongoDB ObjectID"""
  _id: ID

  """Returns an account by ID"""
  fromAccount: Account

  """Returns an account by ID"""
  toAccount: Account

  """Transaction amount"""
  amount: String

  """Transaction description"""
  description: String

  """When the transaction was created"""
  createdAt: String
}

"""A connection to a list of items."""
type TransactionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TransactionEdge]
}

"""An edge in a connection."""
type TransactionEdge {
  """The item at the end of the edge"""
  node: Transaction

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  MessageAdd(input: MessageAddInput!): MessageAddPayload

  """Create a new account"""
  AccountCreate(input: AccountCreateInput!): AccountCreatePayload

  """Transfer money from one account to another"""
  Transfer(input: TransferInput!): TransferPayload
}

type MessageAddPayload {
  message: Message
  clientMutationId: String
}

input MessageAddInput {
  content: String!
  clientMutationId: String
}

type AccountCreatePayload {
  """Returns an account by ID"""
  account: Account
  error: String
  clientMutationId: String
}

input AccountCreateInput {
  """Account owner name"""
  name: String!

  """Initial account balance"""
  initialBalance: Float = 0
  clientMutationId: String
}

type TransferPayload {
  """Returns a transaction by ID"""
  transaction: Transaction
  error: String
  clientMutationId: String
}

input TransferInput {
  """The account from which to transfer money"""
  fromAccount: ID!

  """The account to which to transfer money"""
  toAccount: ID!

  """The amount to transfer"""
  amount: Float!

  """Optional description of the transaction"""
  description: String
  clientMutationId: String
}

type Subscription {
  MessageAdded(input: MessageAddedInput!): MessageAddedPayload
}

type MessageAddedPayload {
  message: Message
  clientSubscriptionId: String
}

input MessageAddedInput {
  clientSubscriptionId: String
}